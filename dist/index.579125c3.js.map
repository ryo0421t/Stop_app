{"mappings":"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","sources":["src/index.js"],"sourcesContent":["\r\n//firebaseとの紐づけ\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyBGJVAFeJaVkbygNQpcXHTAmxu6mqnWvaY\",\r\n    authDomain: \"web-auth-da36c.firebaseapp.com\",\r\n    projectId: \"web-auth-da36c\",\r\n    storageBucket: \"web-auth-da36c.appspot.com\",\r\n    messagingSenderId: \"808812900786\",\r\n    appId: \"1:808812900786:web:f2650f74c3df72caed74ab\",\r\n    measurementId: \"G-L7LBLSEQBS\"\r\n};\r\n\r\n//firestore DBとの連結\r\nfirebase.initializeApp(firebaseConfig);\r\nvar firestore = firebase.firestore();\r\nconst saveButton = document.querySelector(\"#saveButton\");\r\n\r\n//変数の定義\r\nlet userColorTypeValue;\r\nlet timer;\r\nlet countdown = 10;\r\n\r\n//点数の変数\r\nlet points = 0;\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    const video = document.getElementById('video');\r\n    const canvas = document.getElementById('canvas');\r\n    const colorDisplay = document.getElementById('color-display');\r\n    const ctx = canvas.getContext('2d');\r\n\r\n    navigator.mediaDevices.getUserMedia({ video: true })\r\n        .then((stream) => {\r\n            video.srcObject = stream;\r\n        })\r\n        .catch((error) => {\r\n            console.error('Error accessing camera: ', error);\r\n        });\r\n\r\n    video.addEventListener('loadedmetadata', () => {\r\n        canvas.width = video.videoWidth;\r\n        canvas.height = video.videoHeight;\r\n    });\r\n\r\n    video.addEventListener('play', () => {\r\n        function processFrame() {\r\n            ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n            const imageData = ctx.getImageData(canvas.width / 4, canvas.height / 4, canvas.width / 2, canvas.height / 2);\r\n            const pixelData = imageData.data;\r\n            const averageColor = getAverageColor(pixelData);\r\n\r\n            colorDisplay.style.backgroundColor = `rgb(${averageColor.r}, ${averageColor.g}, ${averageColor.b})`;\r\n\r\n            requestAnimationFrame(processFrame);\r\n        }\r\n\r\n        processFrame();\r\n    });\r\n\r\n    function getAverageColor(pixelData) {\r\n        let totalR = 0;\r\n        let totalG = 0;\r\n        let totalB = 0;\r\n\r\n        for (let i = 0; i < pixelData.length; i += 4) {\r\n            totalR += pixelData[i];\r\n            totalG += pixelData[i + 1];\r\n            totalB += pixelData[i + 2];\r\n        }\r\n\r\n        const numPixels = pixelData.length / 4;\r\n        const avgR = Math.round(totalR / numPixels);\r\n        const avgG = Math.round(totalG / numPixels);\r\n        const avgB = Math.round(totalB / numPixels);\r\n\r\n        return { r: avgR, g: avgG, b: avgB };\r\n    }\r\n    const colorTypes = ['赤', '緑', '青', '黒'];\r\n    let randomColorType = colorTypes[Math.floor(Math.random() * colorTypes.length)];\r\n    const randomColor = {\r\n        赤: [255, 0, 0],\r\n        緑: [0, 255, 0],\r\n        青: [0, 0, 255],\r\n        黒: [0, 0, 0],\r\n    }[randomColorType];\r\n    userColorTypeValue = randomColorType;\r\n    document.getElementById('iroValue').innerText = randomColorType;\r\n\r\n    document.getElementById('color-display').style.backgroundColor = `rgb(${randomColor[0]}, ${randomColor[1]}, ${randomColor[2]})`;\r\n\r\n\r\n\r\n});\r\n\r\n\r\n\r\n// function Start() {\r\n// //     timer = setInterval(() => {\r\n// //     // カウントダウンを減らす\r\n// //     countdown--;\r\n\r\n// //     // カウントダウンを画面に表示\r\n// //     document.getElementById('timer-display').innerText = `Time: ${countdown} seconds`;\r\n\r\n// //     if (countdown <= 0) {\r\n// //         // タイマーが切れたときのアクション\r\n// //         alert(\"時間切れです！\");\r\n// //         clearInterval(timer); // タイマーを停止\r\n// //         resetGame(); // ゲームをリセットする関数を呼び出す（必要に応じて実装）\r\n// //     }\r\n// // }, 1000); // 1000ミリ秒 = 1秒\r\n//     setRandomColor();\r\n// }\r\n\r\nfunction checkColorTypeMatch() {\r\n\r\n    const colorDisplay = document.getElementById('color-display');\r\n\r\n    // Validate and compare user-specified color type with camera-detected color type\r\n    const style = getComputedStyle(colorDisplay);\r\n    const backgroundColor = style.backgroundColor;\r\n    const cameraColorType = getClosestColorType(backgroundColor);\r\n\r\n    if (userColorTypeValue === cameraColorType) {\r\n        // alert('Color type matched!');\r\n        incrementPoints();\r\n        // 一致した場合は再度ランダムな色を設定\r\n        setRandomColor();\r\n\r\n    } else {\r\n        // alert('Color type does not match!');\r\n    }\r\n}\r\n\r\nfunction incrementPoints() {\r\n    points++;\r\n    document.getElementById('pointValue').innerText = points;\r\n}\r\n\r\nfunction setRandomColor() {\r\n\r\n    const colorTypes = ['赤', '緑', '青', '黒'];\r\n    let randomColorType = colorTypes[Math.floor(Math.random() * colorTypes.length)];\r\n    const randomColor = {\r\n        赤: [255, 0, 0],\r\n        緑: [0, 255, 0],\r\n        青: [0, 0, 255],\r\n        黒: [0, 0, 0],\r\n    }[randomColorType];\r\n    userColorTypeValue = randomColorType;\r\n    document.getElementById('iroValue').innerText = randomColorType;\r\n\r\n    document.getElementById('color-display').style.backgroundColor = `rgb(${randomColor[0]}, ${randomColor[1]}, ${randomColor[2]})`;\r\n\r\n}\r\n\r\n\r\n\r\nfunction getClosestColorType(rgbColor) {\r\n    const colorTypes = {\r\n        赤: [255, 0, 0],\r\n        緑: [0, 255, 0],\r\n        青: [0, 0, 255],\r\n        黒: [0, 0, 0],\r\n        // Add more color types as needed\r\n    };\r\n\r\n    const rgbMatch = rgbColor.match(/^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)$/);\r\n    const r = parseInt(rgbMatch[1]);\r\n    const g = parseInt(rgbMatch[2]);\r\n    const b = parseInt(rgbMatch[3]);\r\n\r\n    let closestColorType = '';\r\n    let closestColorTypeDistance = Infinity;\r\n\r\n    for (const type in colorTypes) {\r\n        const typeColor = colorTypes[type];\r\n        const distance = getColorDistance(typeColor, [r, g, b]);\r\n\r\n        if (distance < closestColorTypeDistance) {\r\n            closestColorType = type;\r\n            closestColorTypeDistance = distance;\r\n        }\r\n    }\r\n\r\n    return closestColorType;\r\n}\r\n\r\nfunction getColorDistance(color1, color2) {\r\n    const squaredDist = color1.reduce((acc, val, index) => acc + Math.pow(val - color2[index], 2), 0);\r\n    return Math.sqrt(squaredDist);\r\n}\r\n\r\nsaveButton.addEventListener(\"click\", function () {\r\n    var docRef = firestore.doc(\"samples/\" + points);\r\n    // --- Firestoreに登録する ---\r\n    docRef.set({\r\n        // set関数に対し、引数として「キー：値」の形式で\r\n        // ドキュメントに登録するデータを指定し、set関数を実行する\r\n        date: points,\r\n    }).then(() => {\r\n        // 先の処理が成功した場合、こちらの処理が実行される\r\n        // 今回はalertで成功のメッセージを表示する\r\n        alert(\"Status saved!\");\r\n    }).catch((error) => {\r\n        // 先の処理が失敗した場合、こちらの処理が実行される\r\n        // 今回はalertでエラーメッセージを表示する\r\n        alert(\"Firestore Got an error:\", error);\r\n    });\r\n});"],"names":[],"version":3,"file":"index.579125c3.js.map","sourceRoot":"/__parcel_source_root/"}